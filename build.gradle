plugins {
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'war'
	id 'jacoco'
}

war {
	enabled = true
	archiveName 'shumipro.war'
}

group = 'com.ne.jp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4'
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
	}
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
	testCompile group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.3.0'
	testCompile group: 'org.dbunit', name: 'dbunit', version: '2.6.0'
	compile 'org.apache.commons:commons-lang3'
}

test {
	useJUnitPlatform()

	testLogging {
		// テスト時の標準出力と標準エラー出力を表示する
		showStandardStreams true
		// イベントを出力する (TestLogEvent)
		events 'started', 'skipped', 'passed', 'failed'
		// 例外発生時の出力設定 (TestExceptionFormat)
		exceptionFormat 'full'
	}
}
// 設定ファイル環境ごとに切り替え
// 各ファイル名
def templateFile = 'application_template.properties'
def configFile = 'application.properties'
// 対象の環境名（後に値を代入する）
def targetEnv = ''

task replaceConfig {
	description 'Replace application.properties environment.'

	doLast {
		println 'start replacing :' + targetEnv
		// コピー実行部分
		copy {
			// from: コピーするファイルのあるディレクトリを指定する
			from '.'
			// include: 今回はコピーするファイル名を指定している
			include templateFile
			// into: コピー先のディレクトリ
			into 'src/main/resources'
			// application.propertiesにリネームする
			rename(templateFile, configFile)

			// ${buildEnv}を置き換える
			expand([
					buildEnv: targetEnv
			])
			println "replacing finished"
		}
	}
	// 置き換えタスクが終了したらwarコマンドでwar出力する（jarファイルならjarにする）
	finalizedBy {
		war
	}
}

task warProduct {
	// groupを設定することで Gradle Tasksビューのbuildの中に表示される
	group = 'build'
	description 'Create war file for product environment.'

	doLast {
		// targetEnvを設定する
		targetEnv = 'product'
	}
	// targetEnv設定後、replaceConfigタスクを実行する
	finalizedBy {
		replaceConfig
	}
}

// devもProductと同様
task warDev {
	group = 'build'
	description 'Create war file for dev environment.'

	doLast {
		targetEnv = 'dev'
	}
	finalizedBy {
		replaceConfig
	}

}
